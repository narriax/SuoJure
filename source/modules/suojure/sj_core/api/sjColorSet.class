<?php

class sjColorSet {
	public $setid;
	public $colors;
	
	function __construct ($setid) {
		$this->setid = $setid;
		
		$q = db_select('sj_clrset_clrs', 'sets')
		   -> fields ('sets', array('clr'));
		$q -> leftJoin('sj_clrtype', 'types', 'types.name=sets.clrtype');
		$q -> addField('types', 'name', 'clrtype');
		$q -> condition ('sets.clrsetid', $setid);
		$this->colors = $q -> execute() -> fetchAllKeyed (1, 0);
	}
	
	
	
	static function get_color_types () {
		$colors = sjvar('colors', array());
		if (!array_key_exists('types', $colors)) {
			$colors['types'] = db_select('sj_clrtype', 'ct')->fields('ct', array())->orderBy('weight')->execute()->fetchAllAssoc('name');
			sjvar_set('colors', $colors);
		}
		return $colors['types'];
	}
	
	
	static function get_color_families() { 
		$colors = sjvar('colors', array());
		if (!array_key_exists('families', $colors)) {
			$colors['families'] = db_select('sj_clrfamily', 'ct')->fields('ct', array('name', 'baseclr'))->orderBy('weight')->execute()->fetchAllKeyed(0,1);
			sjvar_set('colors', $colors);
		}
		return $colors['families'];
	}
	
	
	static function get_color_table() { 
		$colors = sjvar('colors', array());
		if (!array_key_exists('table', $colors)) {
			$fams = sjColorSet::get_color_families();
			$shades = sjColorSet::get_color_shades();		
			
			$colors = sjvar('colors', array());
			$colors['table'] = array();
			foreach ($fams as $f => $basclr) {
				$colors['table'][$f] = array();
				foreach ($shades as $sh => $shdata) {
					$colors['table'][$f][$sh] = new stdClass();
					$colors['table'][$f][$sh]->name = '';
					$colors['table'][$f][$sh]->color = sjColorSet::alter_color($basclr, $shdata->math);
				}
			}
			
			$whites = array();
			foreach ($colors['table']['white'] as $sh => $clr) {
				$sortkey = str_replace('#', '', $clr->color);
				$sortkey = str_pad(sjColorSet::hex_to_rgb($sortkey)[0], 3, '0', STR_PAD_LEFT);
				$sortkey = $sortkey.'_'.$sh;
				$whites[$sortkey] = array($sh => $clr);
			}
			krsort($whites);
			$colors['table']['white'] = array();
			foreach ($whites as $sortkey => $content) {
				foreach ($content as $sh => $clr)
				$colors['table']['white'][$sh] = $clr;
			}
			
			$named_clrs = sjColorSet::get_colors();
			foreach ($named_clrs as $clrname => $clr) {
				$colors['table'][$clr->family][$clr->shade]->name = $clr->name;
			}
			sjvar_set('colors', $colors);
		}
		return $colors['table'];
	}
	
	
	static function get_color_shades() {
		// = db_select('sj_clrshades', 'cs')->fields('cs', array('name', 'math'))->orderBy('weight')->execute()->fetchAllKeyed(0,1);

		$colors = sjvar('colors', array());
		if (array_key_exists('shades', $colors)) 
			return $colors['shades'];
		
		$q = db_select('sj_clrshades', 'cs')->fields('cs', array());
		//$q ->leftjoin('sj_clr', 'c', 'c.shade=cs.name');
		//$q ->addField('c', 'name', 'clrname');
		//$q ->fields('c', array('family', 'color'));
		$q ->orderBy('weight');//->orderBy('family')->orderBy('clrname');
		$raw = $q->execute()->fetchAll();
		
		$colors['shades'] = array ();
		foreach ($raw as $r) {
			if (!array_key_exists($r->name, $colors['shades'])) {
				$colors['shades'][$r->name] = new stdClass();
				$colors['shades'][$r->name]->name = $r->name;
				$colors['shades'][$r->name]->math = $r->math;
				$colors['shades'][$r->name]->weight = $r->weight;
				//$colors['shades'][$r->name]->colors = array();
			}
			/*
			if (!empty($r->clrname)) {
				if (!array_key_exists($r->family, $colors['shades'][$r->name]->colors)) 
					$colors['shades'][$r->name]->colors[$r->family] = array();
				$colors['shades'][$r->name]->colors[$r->family][$r->clrname] = $r->color;
			}*/
		}
		
		sjvar_set('colors', $colors);
		return $colors['shades'];
	}	
	
	
	static function get_colors($family = '') {
		$q = db_select('sj_clr', 'c')
		   ->fields('c', array('name', 'color', 'shade'));		   
		$q->join('sj_clrfamily', 'cf', 'c.family=cf.name');
		$q->join('sj_clrshades', 'csh', 'c.shade=csh.name');
		$q->addField('cf', 'name', 'family');
		$q->addField('cf', 'weight', 'familyweight');
		$q->addField('cf', 'baseclr', 'family_base');
		$q->addField('csh', 'math', 'shade_math');
		$q->orderBy('cf.weight');
		
		if (!empty($family)) 
			$q->condition('c.family', $family);
		
		$arr = $q->execute()->fetchAllAssoc('name');
		foreach ($arr as $name => $data) {
			if (empty($data->color)) {
				$data->color = sjColorSet::alter_color($data->family_base, $data->shade_math);
			}
		}
		
		return $arr;
	}
	
	

	static function palette_widget ($id, $title, $default_val) {
		$table = sjColorSet::get_color_table();
		if ($default_val[0] !== '#') $default_val = '#'.$default_val;
	
		$radios = '';
		foreach ($table as $fam => $shlist) {
			$radios .= '<div class="palette-row family-'.$fam.'" style="width: '.((count($shlist)+1)*16).'px;">';
			foreach ($shlist as $sh => $clr) {
				$compl = sjColorSet::label_color($clr->color);
				$radios .= '<div class="palette-radio" value="'.$clr->color.'" '.
					'style="background: #'.$clr->color.'; background-img: url();" '.
					'title="'.(empty($clr->name)?'':$clr->name.' - ').'#'.$clr->color.'"
					onclick="'.
						'var el=document.getElementById(\''.$id.'\'); '.
						'el.value=\'#'.$clr->color.'\'; '.
						'el.parentNode.parentNode.style.background=\'#'.$clr->color.'\'; '.
						'(el.parentNode.getElementsByTagName(\'LABEL\')[0]).style.color=\'#'.$compl.'\'; '.
						'el = parentNode.parentNode.getElementsByTagName(\'LABEL\')[0]; '.
						'el.innerHTML=\'&nbsp; '.$clr->name.'\'; '.
						'el.style.color=\'#'.$compl.'\'; '.
						'el.style.background=\'#'.$clr->color.'\'; '.
						'"></div>';
			}
			$radios .= '</div>';
		}
	
		return array (
			//'#type' => 'jquery_colorpicker',
			'#type' => 'textfield',
			'#title' => $title,
			'#default_value' => $default_val,
			'#attributes' => array(
				'class' => array('palette-picker'),
				'onfocus' => 
					'if (this.parentNode.className.indexOf(\' show\') > -1) '.
					'	this.parentNode.className = this.parentNode.className.replace(\' show\', \'\'); '.
					'else this.parentNode.className += \' show\'; ',
				//'onfocusout' => 'this.parentNode.className = this.parentNode.className.replace(\' show\',\'\');',
			),
			'#field_suffix' => '<div class="palette-picker-palette"><label>&nbsp;</label>'.$radios.'</div>',
			'#maxlength' => 7,
		);
	}
	
	
	
	static function rgb_to_hex ($rgb) {
		$clr = '';
		for ($i=0; $i < 3; $i++) {		
			$a = floor($rgb[$i] / 16);
			$b = $rgb[$i] % 16;
			$clr .= sjColorSet::dex_to_hex($a) . sjColorSet::dex_to_hex($b);
		}
		return $clr;
	}
	
	static function hex_to_rgb ($hex) {
		$hex = str_replace('#','',$hex);
		$rgb = array();
		if (strlen($hex) == 3) {
			$d = array(sjColorSet::hex_to_dex($hex[0]));
			$rgb[0] = $d * 16 + $d;
			$d = array(sjColorSet::hex_to_dex($hex[1]));
			$rgb[1] = $d * 16 + $d;
			$d = array(sjColorSet::hex_to_dex($hex[2]));
			$rgb[2] = $d * 16 + $d;
		} else if (empty($hex)) {
			$rgb = array(0, 0, 0);
		} else {
			$rgb = array(
				sjColorSet::hex_to_dex($hex[0]) * 16 + sjColorSet::hex_to_dex($hex[1]),
				sjColorSet::hex_to_dex($hex[2]) * 16 + sjColorSet::hex_to_dex($hex[3]),
				sjColorSet::hex_to_dex($hex[4]) * 16 + sjColorSet::hex_to_dex($hex[5]),
			);
		}
		return $rgb;
	}
	
	static function dex_to_hex($dex) {
		if ($dex < 0) return '0';
		if ($dex > 15) return 'f';
		$dex = round($dex);
		switch ($dex) {
			case 10: return 'a';
			case 11: return 'b';
			case 12: return 'c';
			case 13: return 'd';
			case 14: return 'e';
			case 15: return 'f';
			default: return $dex.'';
		}
	}
	static function hex_to_dex($hex) {
		$hex = trim($hex);
		if (empty($hex)) return 0;
		$hex = strtolower($hex);
		switch ($hex) {
			case 'a': return 10;
			case 'b': return 11;
			case 'c': return 12;
			case 'd': return 13;
			case 'e': return 14;
			case 'f': return 15;
			default: 
				return $hex-0;
		}
	}
	
	static function alter_color ($orig, $math) {
		if (empty($math)) return $orig;
		
		$rgb = sjColorSet::hex_to_rgb($orig);
		$math = str_replace('max', max($rgb).'', $math);
		$math = str_replace('min', min($rgb).'', $math);
		$math = str_replace('ave', round(($rgb[0]+$rgb[1]+$rgb[2])/3).'', $math);
		$clr = '';
		for ($i=0; $i < 3; $i++) {
			$z = $rgb[$i];
			$eval = str_replace('n', $rgb[$i], $math);
			eval('$rgb[$i]=round('.$eval.');');				
		}
		
		return sjColorSet::rgb_to_hex($rgb);
	}
	
	
	static function label_color ($base) {
		$rgb = sjColorSet::hex_to_rgb($base);
		$max = max ($rgb);
		if ($max > 150)
			return '000000';
		else 
			return 'ffffff';
	}
	
}
